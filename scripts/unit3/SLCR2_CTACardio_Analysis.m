%[text] # SLICER Volume Analysis - CTACardio Segmentations
%[text] In this exercise, we compare the segmentations generated by the different segmentation techniques in Slicer.
%[text:tableOfContents]{"heading":"**Table of Contents**"}
%[text] 
%[text] ## Set Folder Path
%[text] 1. Select your CTACardio Folder
%[text] 2. Update the paths to match the names that you set for your project
%[text] 3. Review the path check (there should be no zeros) \
close all
clearvars
paths.project = "/Users/ernesto/MATLAB-Drive/MtMdata/unit3/CTACardio"; %[control:filebrowser:3ae0]{"position":[17,70]}
ls(paths.project) % display folder contents
paths.intensity = fullfile(paths.project,"CTACardio Crop.nrrd");
paths.segment = fullfile(paths.project,"Salcedo Segmentation.seg.nrrd");
paths.total = fullfile(paths.project,"CTACardio Crop segmentation.seg.nrrd");
%[text] path check
structfun(@(x) exist(x,"file"),paths) % make sure paths exist - a zero mean the indicated file does not exist
%%
%[text] ## Load Segmentations
intMV = medicalVolume(paths.intensity); % intensity volume
myMV = medicalVolume(paths.segment) % my kidney and aorta segmentations
totalMV = medicalVolume(paths.total) % totalsegmentator segmentations
%%
%[text] ### Get slicer tables
%[text] These tables contain the information that you set in Slicer (Segmentation Name and Color)
myT = mmGetSlicerSegTable(paths.segment)
totT = mmGetSlicerSegTable(paths.total)
%%
%[text] ### Index out a Kidney and Compare
%[text] The function **`mmGetMedicalVolumeSegment`** indexes out the indicated segment and returns a structure containing the mask, the color, and the transformation matrix.
segName = "right kidney"
mySeg = mmGetMedicalVolumeSegment(myMV,myT,segName=segName)
totSeg = mmGetMedicalVolumeSegment(totalMV,totT,segName=segName)
%%
%[text] ### Compare Kidneys
%[text] Notice that the volumes appear to different. If we can calculate a ratio between the two volumes
mySeg.volume/totSeg.volume % ratio of volumes
%[text] - we find the volumes are significantly different \
%%
%[text] We can use also use [dice](https://en.wikipedia.org/wiki/Dice-S%C3%B8rensen_coefficient) and jaccard to gauge the similarity of two segmentations. 
dice(mySeg.mask,totSeg.mask)
jaccard(mySeg.mask,totSeg.mask)
%[text] - These are relatively low values for similarity, so there is quite a bit of difference between the volumes
%[text] - What's going on? \
%%
%[text] ## Review Slice Planes and segmentation
%[text] We can use **`volshow`** to review our segmentations. Here we plot my segmentations as volume renders and the total segmentations as slice planes
hvr = viewer3d(parent=uifigure,BackgroundColor="white",BackgroundGradient="off",CameraZoom=1); % set background color to white and turn off gradient
volshow(myMV,Parent=hvr) % display my segmentation as a volume render
volshow(intMV,parent= hvr,RenderingStyle="SlicePlanes",OverlayData=totalMV.Voxels) % display total segmentation as slice planes
%%
%[text] ### Plot Kidneys as surfaces
%[text] We can also plot the segmentations as surfaces so we can better gauge where the differences might be
%[text] The function **`mmPlotMask2Surface`** plots masks as 3D Surfaces. We had patch handles (hp) to the segmentation structure
figure;
mySeg.hp =  mmPlotMask2Surface(mySeg.mask,fcolor='m');
totSeg.hp = mmPlotMask2Surface(totSeg.mask,fcolor='cyan',smooth=false);
%%
%[text] ### Compare surfaces used Hausdorff distance
%[text] A measurement of the summed difference between the two surfaces
robustHD(mySeg.hp.Vertices,totSeg.hp.Vertices,5,'euclidean') % calculate difference between surfaces
%[text] - myPatch and totPatch are handles to the plotted surfaces.
%[text] - Try turning on smooth for the total patch
%[text] - The total segmentator volume looks larger than my segmentation, but not that much larger
%[text] - My segmentation does not have the medulla segmented  \
%%
%[text] ### Plot Kidneys using volshow
%[text] If we plot each kidney using volshow, we can use the volshow tools to slice the kidney and inspect the interior. We are going to use a different figure call, **`uifigure,`** so we can place our figures in the same figure. After the volumes are displayed:
%[text] -  add a clipping plane and clip both volumes: \
volshowComp(totSeg,mySeg)

function  volshowComp(mv1,mv2)
fig = uifigure(Name="Kidney Comparison"); % special figure that can hold volshow viewers
g = uigridlayout(fig,[1 2],Padding=[0 0 0 0]); % like tiledlayout, but different. 1x2 tiles
hvr1 = viewer3d(parent=g,BackgroundColor="white",BackgroundGradient="off",CameraZoom=1); % set background color to white and turn off gradient
hvr2 = viewer3d(parent=g,BackgroundColor="white",BackgroundGradient="off",CameraZoom=1); % set background color to white and turn off gradient
volshow(mv1.mask,Parent=hvr1);
volshow(mv2.mask, Parent=hvr2);
end
%[text] - So, as we can see, my kidney is riddled with holes (the medulla), while the total segmentator is more whole — this is why the volumes differ. \
%%
%[text] #### Use Scissors tool to remove vasculature
%[text] 1. Use the scissors to clip off the vasculature from my kidney
%[text] 2. When you are done, right click on the kidney, and select export scissor mask to workspace
%[text] 3. Export as `scissorsMask`  \
mySeg.maskCut = mySeg.mask;
mySeg.maskCut(scissorsMask) = false; % remove vasculature voxels from kidney mask
%%
%[text] #### Can we fill the holes?
mySeg.fill = imfill(mySeg.maskCut,26,"holes");
%%
volshow(mySeg.fill)
%[text] - holes can't be filled because of opening through surface \
%%
%[text] ### Calculate volume using Convex Hull
%[text] A convex hull is like shrink wrap for your volume. We can use convex hull to capture the internal volume of our segmentation, as follows:
rp = regionprops3(mySeg.maskCut,["Volume", "ConvexVolume","ConvexImage","ConvexHull","Image"])
%[text] Here, regionprops3 returns:
%[text] - **two scalars:** `volume` and  `convexVolume`
%[text] - **two volumes**: `Image` and `ConvexImage`
%[text] - **one vertices set**`: ConvexHull surface` \
%[text] Notice that the convexVolume is larger than the Volume
%%
%[text] #### Visualize the convex hull volume
volshow(rp.ConvexImage{1})
%[text] - doesn't look especially kidney-like \
%%
%[text] #### Overlay Image and ConvexImage as surfaces
%[text] Notice here we are plotting the volumes `rp.Image` and `rp.ConvexImage`, captured by Region Props. These are cropped volumes that contain just the kidney. 
figure;
mmPlotMask2Surface(rp.Image{:},fcolor='m');
mmPlotMask2Surface(rp.ConvexImage{:},fcolor='cyan',smooth=false);
%[text] - The kidney is in there
%[text] - But the hull is not a good representation of the kidney Shape \
%%
%[text] ### Calculate Volume from surface using AlphaShape
%[text] An alphaShape is similar to convex hull, but it can be more representative of the surface shape. We generate alphaShapes from vertices, so we first need to plot the kidney as a surface:
figure;
mySeg.hp = mmPlotMask2Surface(mySeg.maskCut,fcolor='m');
%[text] 
%%
%[text] #### Generate alphaShape
%[text] here we use the function `alphaShape` to generate the shape
ashp = alphaShape(mySeg.hp.Vertices,5)
%[text] - The function returns an alphaShape object
%[text] - The object contains a set of vertices that represents the exterior surface of the object \
%%
%[text] ### Plot alphaShape
%[text] we use the function `plot` to plot the alphaShape
figure
hashp = plot(ashp,"FaceColor",'c',"EdgeAlpha",0.5);
%[text] - notice there are no holes in our surface (very important when calculating volume) \
%%
%[text] #### Overlay alphaShape and original volume
hashp.FaceAlpha = 0.5; % increase alphaShape transparency
mmPlotMask2Surface(mySeg.maskCut,fcolor='m');
%[text] - better shape representation \
%[text] 
%%
%[text] #### Compare volumes
%[text] An alphaShape has the volume automatically calculated. 
ashp.volume 
ashp.volume/totSeg.volume % volume ratios
%[text] - volume closer to totalSegmentator volume \
%%
figure
plot(ashp,"FaceColor",'c',EdgeAlpha=0.5,FaceAlpha=0.5);
mmPlotMask2Surface(totSeg.mask,fcolor='m');
%[text] - These shapes look comparable
%[text] - totalSegmentator larger than my segmentation.  \
%%
%[text] ## Compare Aorta
segName = "aorta";
mySeg = mmGetMedicalVolumeSegment(myMV,myT,segName=segName);
totSeg = mmGetMedicalVolumeSegment(totalMV,totT,segName=segName);
%%
figure;
mySeg.hp =  mmPlotMask2Surface(mySeg.mask,fcolor='m');
totSeg.hp = mmPlotMask2Surface(totSeg.mask,fcolor='cyan',smooth=false);
%%
mySeg.maskCrop = mySeg.mask;
mySeg.maskCrop(~totSeg.mask) = false;
%%
figure;
mySeg.hp =  mmPlotMask2Surface(mySeg.maskCrop,fcolor='m');
totSeg.hp = mmPlotMask2Surface(totSeg.mask,fcolor='cyan',smooth=false);
%%
rp = regionprops3(mySeg.maskCrop,'Volume');
mySeg.volCrop = rp.Volume

%[appendix]{"version":"1.0"}
%---
%[metadata:view]
%   data: {"layout":"inline","rightPanelPercent":48}
%---
%[control:filebrowser:3ae0]
%   data: {"browserType":"Folder","defaultValue":"\"\"","label":"select CTACardio folder","run":"Section"}
%---
